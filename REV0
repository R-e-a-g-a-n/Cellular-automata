// boxes 
BoxClass[][][] boxes = new BoxClass[30][30][30];
 BoxClass[][][] nextboxes = new BoxClass[30][30][30];
// camera 
PVector camPos;     // camera vectors 
PVector camLookAt;
PVector camUp;
 //Cellular automita growth structure
int[][][] grid;
int state, x1, y1, z1;
int ptime = 0;
// camera rotation 
float camCurrentAngle;       // for camera rotation around center
float camRadius;             // 
 
// --------------------------------------------------------
// main funcs 
 
void setup() {
  size(1000, 1000, OPENGL);
 //----------------------------------------------------------
  x1 = y1= z1= 30;
  grid = new int[x1][y1][z1];

  //Initialize with 0's
  for (int i = 0; i < x1; i++) {
    for (int j = 0; j < y1; j++) {
       for(int k = 0; k < z1; k++){
         if( i == 14 & j == 14 & k == 14 || i == 15 & j == 14 & k == 14 || i == 14 & j == 15 & k == 14 || i == 15 & j == 15 & k == 14){
        grid[i][j][k] = 1;//Fill the array with random values
         }
         if( i == 14 & j == 14 & k == 15 || i == 15 & j == 14 & k == 15 || i == 14 & j == 15 & k == 15 || i == 15 & j == 15 & k == 15){
        grid[i][j][k] = 1;//Fill the array with random values
         }
         
       }
    }
  }  
  //----------------------------------------------------------

  // set camera vectors 
  camPos    = new PVector((width+2500)/2.0, (height+2500)/2.0, 3800);
  camLookAt = new PVector((width+2500)/2.0, (height+2500)/2.0, -2000);
  camUp     = new PVector( 0, 1, 0 );
 
  // boxes
  defineBoxes();
  background(111);
  println ("Any key to reset.");
  //

} // func 
 
void draw() {
  // clear background 
  background(111);

  // set lights
  lights();
 
  // set cam pos 
  camera (camPos.x, camPos.y, camPos.z, 
  camLookAt.x, camLookAt.y, camLookAt.z, 
  camUp.x, camUp.y, camUp.z);
 //------------------------------------------------------------
  for (int i = 0; i < x1; i++) {
    for (int j = 0; j < y1; j++) {
       for(int k = 0; k < z1; k++){
            if (grid[i][j][k] == 1) {    //this is the paint section, if grid is one then draw a cube at that location and fill it
              boxes[i][j][k].show();
           }
         }
       }
     }

  int[][][] next = new int[x1][y1][z1];    //here we setup another 2d array called "next"
if(millis()>= ptime+300){
  // Compute next based on grid
  //Can this be done in the display array?
  //Can this be its own function?
  for (int i = 0; i < x1; i++) {
    for (int j = 0; j < y1; j++) {
      for (int k = 0; k < z1; k++){
        int state = grid[i][j][k];
        // Count thy neighbors!
        //int sum = 0;
        int neighbors = countNeighbors(grid, i, j, k);
        //here next is used as a temporary storage grid which will later be coppied to the original display grid
        if (state == 0 && neighbors >= 4 && neighbors <= 4) {
          next[i][j][k] = 1;
        } else if (state == 1 && (neighbors < 20 || neighbors > 1)) {
          next[i][j][k] = 0;
        } else {
          next[i][j][k] = state;
        }
      }
    }
  }
    grid = next;
    ptime = millis();
}

//--------------------------------------------------------------
  
 nextboxes = boxes;
  // camera rotation
  camCurrentAngle += 0.50;
  lookAtAngle();
  //
} // func draw()
 
// ----------------------------------------------------
// input funcs
 
 //3d neighbor count
int countNeighbors(int [][][]grid, int x, int y, int z) {
  int sum = 0;
  for (int i = -1; i < 2; i++) {
    for (int j = -1; j < 2; j++) {
      for (int k = -1; k < 2; k++){
      int x2 = (x + i + x1) % x1;
      int y2 = (y + j + y1) % y1;
      int z2 = (z + k + z1) % z1;
      sum += grid[x2][y2][z2];
      }
    }
  }
  sum -= grid[x][y][z];
  return sum;
}

 
void keyPressed () {
  // reset 

  defineBoxes();
}
 
// ----------------------------------------------------
// misc funcs
 
void defineBoxes() {
  // define boxes
  for (int i = 0; i < boxes.length; i++) {
    for (int j = 0; j < boxes[i].length; j++) {
      for (int k = 0; k < boxes[i][j].length; k++) {
        // prepare values 
        color currentCol = color (50,50,150,70);
        
        boolean exist;
        exist = true;
        // create a box   
        boxes[i][ j][k] = new BoxClass( 158 + i*(height/10), 
        158 + j*(height/10), 
        - k*(height/10), 
        currentCol, 
        exist);
      }
    }
  }

} // func 
 
void lookAtAngle() {
  // rotation in the plane : camera 
  camRadius = camLookAt.dist (camPos); 
  camPos.x = camRadius * cos (radians(camCurrentAngle)) + camLookAt.x;
  camPos.z = camRadius * sin (radians(camCurrentAngle)) + camLookAt.z;
} // func 
 
// =====================================================
// class 
 
class BoxClass {
 
  // this class represents one Box / Cell
 
  float x;  // pos 
  float y;
  float z;
 
  color col;  // color 
  boolean exist = true; // display it yes/no 
 
  // constr
  BoxClass(float x_, float y_, float z_, 
  color col_, 
  boolean exist_ ) {
    x = x_;
    y = y_;
    z = z_;
    col = col_;
    exist = exist_;
  } // constr
 
  void show() {
    if (exist) {
      noStroke();
      fill(col);
      pushMatrix();
      translate(x, y, z);
      box(55);
      popMatrix();
    } // if
  } // method
} // class 
//
